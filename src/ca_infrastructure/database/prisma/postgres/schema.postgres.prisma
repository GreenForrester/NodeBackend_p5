// This is your Prisma schema file, use hubql.com tool to easily work with schema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/postgres"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model Product {
  //fields section
  productCode         String  @id @default(uuid())
  productName         String
  productvendor       String
  productDescription  String
  quantityInStock     Int
  buyPrice            Float
  msrp                Float
  creationDate        DateTime @default(now())
  modificationDate    DateTime @updatedAt

  //relations and reverse relations
  orderItems OrderItem[]
  customerProducts CustomerProduct[]
  orders Order[]

  //indexes section
  @@index([productName])
}

model Customer {
  customerCode        Int    @id @default(autoincrement())
  customerName        String
  cemail              String @unique
  phone               String
  address             String
  city                String
  postalCode          String
  country             String
  creationDate        DateTime @default(now())
  modificationDate    DateTime @updatedAt
  
  //reverse relation
  orders Order[]
  customerProducts CustomerProduct[]

}

model Order {
  orderId             String       @id @default(uuid())
  orderDate           DateTime     @default(now())
  customer            Customer     @relation(fields: [customerId], references: [customerCode])
  customerId          Int
  shippingDate        DateTime
  status              String
  comments            String
  total               Float
  paid                Boolean      @default(false)
  products            Product[]
  orders              OrderItem[]
}

model OrderItem {
  orderId             String       @id @default(uuid())
  order               Order        @relation(fields: [orderId], references: [orderId])
  product             Product      @relation(fields: [productId], references: [productCode])
  productId           String
  quantity            Int          @default(1) 
}

///
/// A Join Table to find all customers who bought a certain product
///
model CustomerProduct {
  customerId Int
  productId  String
  customer   Customer @relation(fields: [customerId], references: [customerCode])
  product    Product  @relation(fields: [productId], references: [productCode])

  @@id([customerId, productId]) 
}

// a common user model
model User {
  userId       String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  phoneNumber  String?
  role         String
  status       String
  password     String
  firstName    String?
  lastName     String?
  address      String?
  city         String?
  postalCode   String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
